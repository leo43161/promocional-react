name: Deploy Next.js Static Site to cPanel

# Disparador: Se ejecuta cuando haces push a la rama 'main'
# También permite ejecución manual desde la pestaña Actions en GitHub
on:
  push:
    branches:
      - main # O la rama principal que uses (master, prod, etc.)
  workflow_dispatch: # Permite la ejecución manual

  # --- AÑADIR ESTO ---
concurrency:
  # Agrupa las ejecuciones por el nombre del workflow Y la rama (o referencia git)
  # Esto asegura que solo haya una ejecución activa por rama a la vez para este workflow.
  group: ${{ github.workflow }}-${{ github.ref }}
  # Cancela ejecuciones anteriores en progreso dentro del mismo grupo
  cancel-in-progress: true
# --- FIN DE LO AÑADIDO ---

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Usa un runner de Linux

    steps:
      # 1. Descarga el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v4 # Acción oficial para clonar el repo

      # 2. Configura Node.js (ajusta la versión si es necesario)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.12.0" # Usa una versión LTS recomendada o la que uses tú
          cache: "npm" # Habilita caché para 'npm install'

      # 3. Instala las dependencias (usa 'npm ci' para instalaciones más rápidas y fiables en CI)
      - name: Install dependencies
        run: npm ci

      # 4. Construye el sitio estático (incluye next export)
      # Si tu build necesita variables de entorno (ej: URL de API), añádelas aquí
      - name: Build static site
        run: npm run build:static
        # Ejemplo si necesitaras variables de entorno:
        env:
          IS_CPANEL_DEPLOY: "true"
        #   NEXT_PUBLIC_ALGUNA_VAR: ${{ secrets.ALGUNA_VAR_PUBLICA }}

      # 5. Comprime la salida en un archivo ZIP
      # Nos aseguramos de entrar al directorio 'out' antes de comprimir
      # para que el zip no contenga la carpeta 'out' en sí misma.
      - name: Compress build output for deployment
        run: |
          cd out
          zip -r ../deploy.zip .

      # 6. Prepara el artefacto para la subida (EL NUEVO PASO CLAVE)
      - name: Prepare artifact for upload
        run: |
          mkdir upload_dir
          mv deploy.zip upload_dir/

      # 7. Sube el contenido del directorio temporal (que solo tiene el ZIP)
      - name: Deploy ZIP to cPanel
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_USERNAME }}
          password: ${{ secrets.CPANEL_PASSWORD }}
          port: 21
          local-dir: ./upload_dir/ # <-- Le decimos exactamente qué archivo subir
          server-dir: / # <-- La carpeta de destino en tu servidor

      # 8. Llama al script PHP para que descomprima el archivo
      - name: Trigger unzip on server
        run: curl --fail "https://tucumanturismo.gob.ar/descomprimir.php?secret=${{ secrets.UNZIP_SECRET }}"

          # --- OPCIONES MODIFICADAS ---
          # dangerous-clean-slate: true # <-- ELIMINADO
          # Opcional: Puedes añadir 'delete: true' si quieres borrar archivos viejos
          # en el servidor que YA NO existen en './out/', pero ten cuidado.
          # delete: true
          # Asegúrate que tu .htaccess esté en public/ para que se incluya en out/
